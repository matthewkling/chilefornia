d$p <- 1 - scales::rescale(abs(d$x) + rnorm(n))
d <- rbind(d, c(3, 1))
# fit smoothing spline
fit <- gam(p ~ s(x, bs="cs"), data=d, family=binomial(logit))
pred <- predict(fit, d, type="response", se=T)
inv_logit <- function(x) exp(x)/(1+exp(x))
d <- cbind(d, pred) %>%
mutate(upper_ci = fit + 2 * se.fit,
lower_ci = fit - 2 * se.fit)
#%>%
#      mutate_at(vars(fit:lower_ci), inv_logit)
#
ggplot(d) +
geom_point(aes(x, p)) +
geom_line(aes(x, fit))
mutate(p = 1 - scales::rescale(abs(x) + rnorm(n))
)
# simulate data
n <- 1000
d <- data.frame(x = rnorm(n)) %>%
mutate(p = 1 - scales::rescale(abs(x) + rnorm(n)))
d <- rbind(d, c(3, 1))
n <- 1000
d <- data.frame(x = rnorm(n)) %>%
mutate(p = 1 - scales::rescale(abs(x) + rnorm(n)))
d <- rbind(d, c(3, 1))
# fit smoothing spline
fit <- gam(p ~ s(x, bs="cs"), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
ggplot(d) +
geom_point(aes(x, p)) +
geom_line(aes(x, fit)) +
geom_ribbon(aes(x, ymin=lower_ci, ymax=upper_ci))
ggplot(d) +
geom_point(aes(x, p)) +
geom_line(aes(x, fit))
# simulate data
n <- 1000
d <- data.frame(x = rnorm(n)) %>%
mutate(p = 1 - scales::rescale(abs(x) + rnorm(n)))
d <- rbind(d, c(3, 1))
# fit smoothing spline
fit <- gam(p ~ s(x, bs="cs"), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
#d <- cbind(d, pred) %>%
#      mutate(upper_ci = fit + 2 * se.fit,
#             lower_ci = fit - 2 * se.fit)
ggplot(d) +
geom_point(aes(x, p)) +
geom_line(aes(x, fit), color="red")
plot(fit)
plot(fit, type="response")
?plot.gam
library(tidyverse)
library(mgcv)
# simulate data
n <- 1000
d <- data.frame(x = rnorm(n)) %>%
mutate(p = 1 - scales::rescale(abs(x) + rnorm(n)))
# fit GAM smoothing spline
fit <- gam(p ~ s(x), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(x, p)) +
geom_line(aes(x, fit), color="red")
# plot
ggplot(d) +
geom_point(aes(x, p)) +
geom_line(aes(x, fit), color="red")
# plot
ggplot(d) +
geom_point(aes(x, p)) +
geom_line(aes(x, fit), color="red")
# plot
ggplot(d) +
geom_point(aes(x, p)) +
geom_line(aes(x, fit), color="red")
# plot
ggplot(d) +
geom_point(aes(x, p)) +
geom_line(aes(x, fit), color="red")
# plot
ggplot(d) +
geom_point(aes(x, p)) +
geom_line(aes(x, fit), color="red")
# simulate data
n <- 1000
d <- data.frame(x = rnorm(n)) %>%
mutate(p = 1 - scales::rescale(abs(x) + rnorm(n)))
# fit GAM smoothing spline
fit <- gam(p ~ s(x), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(x, p)) +
geom_line(aes(x, fit), color="red")
# simulate data
n <- 1000
d <- data.frame(x = rnorm(n)) %>%
mutate(p = 1 - scales::rescale(abs(x) + rnorm(n)))
# fit GAM smoothing spline
fit <- gam(p ~ s(x), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(x, p)) +
geom_line(aes(x, fit), color="red")
# simulate hump-shaped data, proportion ~ cwd
n <- 1000
d <- data.frame(cwd = rnorm(n)) %>%
mutate(p = 1 - scales::rescale(abs(x) + rnorm(n)))
# fit GAM smoothing spline
fit <- gam(p ~ s(cwd), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, p)) +
geom_line(aes(cwd, fit), color="red")
d <- data.frame(cwd = rnorm(n)) %>%
mutate(p = 1 - scales::rescale(abs(cwd) + rnorm(n)))
# fit GAM smoothing spline
fit <- gam(p ~ s(cwd), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, p)) +
geom_line(aes(cwd, fit), color="red")
d <- data.frame(cwd = rnorm(n)) %>%
mutate(cover = 1 - scales::rescale(abs(cwd) + rnorm(n)),
presence = cover > .5)
# fit GAM smoothing spline
fit <- gam(cover ~ s(cwd), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, p)) +
geom_line(aes(cwd, fit), color="red")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit), color="red")
# fit GAM smoothing spline
fit <- gam(presence ~ s(cwd), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit), color="red")
n <- 10000
d <- data.frame(cwd = rnorm(n)) %>%
mutate(cover = 1 - scales::rescale(abs(cwd) + rnorm(n)),
presence = cover > .5)
# fit GAM smoothing spline
fit_cover <- gam(cover ~ s(cwd), data=d, family=binomial(logit))
fit_presence <- gam(presence ~ s(cwd), data=d, family=binomial(logit))
d$fit_cover <- predict(fit_cover, d, type="response")
d$fit_presence <- predict(fit_presence, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit_presence), color="red")
n <- 10000
d <- data.frame(cwd = rnorm(n)) %>%
mutate(cover = 1 - scales::rescale(abs(cwd) + rnorm(n)),
presence = cover > .5)
# fit GAM smoothing spline
fit_cover <- gam(cover ~ s(cwd), data=d, family=binomial(logit))
fit_presence <- gam(presence ~ s(cwd), data=d, family=binomial(logit))
d$fit_cover <- predict(fit_cover, d, type="response")
d$fit_presence <- predict(fit_presence, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit_presence), color="red")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit_cover), color="red") +
geom_line(aes(cwd, fit_presence), color="blue")
# simulate hump-shaped data, proportion ~ cwd
n <- 1000
d <- data.frame(cwd = rnorm(n)) %>%
mutate(cover = 1 - scales::rescale(abs(cwd) + rnorm(n)),
presence = cover > .5)
# fit GAM smoothing spline
fit_cover <- gam(cover ~ s(cwd), data=d, family=binomial(logit))
fit_presence <- gam(presence ~ s(cwd), data=d, family=binomial(logit))
d$fit_cover <- predict(fit_cover, d, type="response")
d$fit_presence <- predict(fit_presence, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit_cover), color="red") +
geom_line(aes(cwd, fit_presence), color="blue")
?s
# simulate hump-shaped data, proportion ~ cwd
n <- 1000
d <- data.frame(cwd = rnorm(n)) %>%
mutate(cover = 1 - scales::rescale(abs(cwd) + rnorm(n)))
# fit GAM smoothing spline
fit <- gam(cover ~ s(cwd), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit), color="red")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit), color="red")
# fit GAM smoothing spline
fit <- gam(cover ~ s(cwd, k=5), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit), color="red")
# fit GAM smoothing spline
fit <- gam(cover ~ s(cwd, k=5o), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit), color="red")
# fit GAM smoothing spline
fit <- gam(cover ~ s(cwd, k=50), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit), color="red")
# fit GAM smoothing spline
fit <- gam(cover ~ s(cwd, k=500), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit), color="red")
# fit GAM smoothing spline
fit <- gam(cover ~ s(cwd, k=50), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit), color="red")
# fit GAM smoothing spline
fit <- gam(cover ~ s(cwd, k=2), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, cover)) +
geom_line(aes(cwd, fit), color="red")
# simulate hump-shaped data, proportion ~ cwd
n <- 1000
d <- data.frame(cwd = rnorm(n)) %>%
mutate(p = 1 - scales::rescale(abs(cwd) + rnorm(n)))
# fit GAM smoothing spline
fit <- gam(p ~ s(cwd, k=2), data=d, family=binomial(logit))
d$fit <- predict(fit, d, type="response")
# plot
ggplot(d) +
geom_point(aes(cwd, p)) +
geom_line(aes(cwd, fit), color="red")
pred <- data.frame(x = seq(min(d$cwd), max(d$cwd), length.out=1000))
pred <- data.frame(cwd = seq(min(d$cwd), max(d$cwd), length.out=1000))
pred$fit <- predict(fit, pred, type="response")
# plot
ggplot(d) +
geom_point(data = d, aes(cwd, p)) +
geom_line(datat = pred, aes(cwd, fit), color="red")
pred <- data.frame(cwd = seq(min(d$cwd), max(d$cwd), length.out=1000))
pred$fit <- predict(fit, pred, type="response")
# plot
ggplot(d) +
geom_point(data = d, aes(cwd, p)) +
geom_line(datat = pred, aes(cwd, fit), color="red")
d <- data.frame(cwd = rnorm(n) + 3) %>%
mutate(p = 1 - scales::rescale(abs(cwd) + rnorm(n)))
n <- 1000
d <- data.frame(cwd = rnorm(n) + 3) %>%
mutate(p = 1 - scales::rescale(abs(cwd) + rnorm(n)))
# fit GAM smoothing spline
fit <- gam(p ~ s(cwd, k=2), data=d, family=binomial(logit))
pred <- data.frame(cwd = seq(min(d$cwd), max(d$cwd), length.out=1000))
pred$fit <- predict(fit, pred, type="response")
# plot
ggplot(d) +
geom_point(data = d, aes(cwd, p)) +
geom_line(datat = pred, aes(cwd, fit), color="red")
# simulate hump-shaped data, proportion ~ cwd
n <- 1000
d <- data.frame(cwd = rnorm(n)) %>%
mutate(p = 1 - scales::rescale(abs(cwd) + rnorm(n)))
# fit GAM smoothing spline
fit <- gam(p ~ s(cwd, k=2), data=d, family=binomial(logit))
pred <- data.frame(cwd = seq(min(d$cwd), max(d$cwd), length.out=1000))
pred$fit <- predict(fit, pred, type="response")
# plot
ggplot(d) +
geom_point(data = d, aes(cwd, p)) +
geom_line(datat = pred, aes(cwd, fit), color="red")
n <- 1000
d <- data.frame(cwd = rnorm(n)) %>%
mutate(p = 1 - scales::rescale(abs(cwd) + rnorm(n)))
# fit GAM smoothing spline
fit <- gam(p ~ s(cwd, k=2), data=d, family=binomial(logit))
pred <- data.frame(cwd = seq(min(d$cwd), max(d$cwd), length.out=1000))
pred$fit <- predict(fit, pred, type="response")
# plot
ggplot(d) +
geom_point(data = d, aes(cwd, p)) +
geom_line(data = pred, aes(cwd, fit), color="red")
# simulate hump-shaped data, proportion ~ cwd
n <- 1000
d <- data.frame(cwd = rnorm(n) + 3) %>%
mutate(p = 1 - scales::rescale(abs(cwd) + rnorm(n)))
# fit GAM smoothing spline
fit <- gam(p ~ s(cwd, k=2), data=d, family=binomial(logit))
pred <- data.frame(cwd = seq(min(d$cwd), max(d$cwd), length.out=1000))
pred$fit <- predict(fit, pred, type="response")
# plot
ggplot(d) +
geom_point(data = d, aes(cwd, p)) +
geom_line(data = pred, aes(cwd, fit), color="red")
# simulate hump-shaped data, proportion ~ cwd
n <- 1000
d <- data.frame(cwd = rnorm(n)) %>%
mutate(p = 1 - scales::rescale(abs(cwd) + rnorm(n)))
# fit GAM smoothing spline
fit <- gam(p ~ s(cwd, k=2), data=d, family=binomial(logit))
pred <- data.frame(cwd = seq(min(d$cwd), max(d$cwd), length.out=1000))
pred$fit <- predict(fit, pred, type="response")
# plot
ggplot(d) +
geom_point(data = d, aes(cwd, p)) +
geom_line(data = pred, aes(cwd, fit), color="red")
19 ^ 2
19!
factorial(19)
sum(2:19)
189 * 8 * 20 * 112
devtools::install_github("matthewkling/hydro")
library(hydro)
?water_balance
setwd("~desktop/")
setwd("~/desktop/GCM_0319/")
library(tidyverse)
setwd("~/desktop/GCM_0319/")
list.files()
list.files(full.names=T)
list.files(full.names=T, recursive=T)
list.files(full.names=T, recursive=T, pattern="DifPreA")
files <- files[grepl("bio1_bio14|bio17_bio17", files)]
files <- list.files(full.names=T, recursive=T, pattern="DifPreA")
files <- files[grepl("bio1_bio14|bio17_bio17", files)]
files
files <- files[grepl("bio1_bio14|bio11_bio17", files)]
files <- list.files(full.names=T, recursive=T, pattern="DifPreA")
files <- files[grepl("bio1_bio14|bio11_bio17", files)]
files
files <- list.files(full.names=T, recursive=T, pattern="DifPre")
files <- files[grepl("bio1_bio14|bio11_bio17", files)]
files
files <- list.files(full.names=T, recursive=T, pattern="DifPre_")
files <- files[grepl("bio1_bio14|bio11_bio17", files)]
d <_ files %>%
lapply(read_csv)
d <- files %>%
lapply(read_csv)
glimpse(d[[1]])
files
files[i] %>% substr(nchar(.)-19, nchar(.)-15, .)
i=1
files[i] %>% substr(nchar(.)-19, nchar(.)-15, .)
?substr
files[i] %>% substr(nchar(.)-19, nchar(.)-15)
for(i in 1:length(d)) d[[i$scenario]] <- files[i] %>% substr(nchar(.)-19, nchar(.)-15)
for(i in 1:length(d)) d[[i]]$scenario <- files[i] %>% substr(nchar(.)-19, nchar(.)-15)
glimpse(d[[1]])
d <- do.call("rbind", d)
d <- Reduce("full_join", d)
head(d)
glimpse(d)
d <- d[, c(1, 4, 5, 6, 9, 10)]
head(d)
names(d) <- c("GCM", "bio1", "bio14", "scenario", "bio11", "bio17")
d <- d[,c(1, 4, 2, 3, 5, 6)]
head(d)
ggplot(d, aes(bio1, bio17)) +
geom_point()
View(d)
d <- files %>%
lapply(read_csv)
for(i in 1:length(d)) d[[i]]$scenario <- files[i] %>% substr(nchar(.)-19, nchar(.)-15)
d <- Reduce("full_join", d)
d <- files %>%
lapply(read_csv)
for(i in 1:length(d)) d[[i]]$scenario <- files[i] %>% substr(nchar(.)-19, nchar(.)-15)
d <- Reduce("full_join", d, by=c("GCM"))
?full_join
?Reduce
fj <- function(x, y) full_join(x, y, by="GCM")
d <- Reduce("fj", d)
View(d)
d <- files %>%
lapply(read_csv)
for(i in 1:length(d)) d[[i]]$scenario <- files[i] %>% substr(nchar(.)-19, nchar(.)-15)
fj <- function(x, y) full_join(x, y, by=c("GCM", "scenario"))
d <- Reduce("fj", d)
d <- files %>%
lapply(read_csv)
for(i in 1:length(d)) d[[i]]$scenario <- files[i] %>% substr(nchar(.)-19, nchar(.)-15)
fj <- function(x, y) full_join(x, y, by=c("GCM", "scenario"))
d <- Reduce("full_join", d)
fx <- function(x) na.omit(x)[1]
d <- Reduce("full_join", d) %>%
group_by(GCM, scenario) %>%
summarize_all(fx)
d <- files %>%
lapply(read_csv)
for(i in 1:length(d)) d[[i]]$scenario <- files[i] %>% substr(nchar(.)-19, nchar(.)-15)
fx <- function(x) na.omit(x)[1]
d <- Reduce("full_join", d) %>%
group_by(GCM, scenario) %>%
summarize_all(fx)
View(d)
d <- Reduce("full_join", d) %>%
group_by(GCM, scenario) %>%
summarize_all(fx) %>%
filter(! GCM %in% c("ENSEMBLE", "BASELINE"))
d <- files %>%
lapply(read_csv)
for(i in 1:length(d)) d[[i]]$scenario <- files[i] %>% substr(nchar(.)-19, nchar(.)-15)
fx <- function(x) na.omit(x)[1]
d <- Reduce("full_join", d) %>%
group_by(GCM, scenario) %>%
summarize_all(fx) %>%
filter(! GCM %in% c("ENSEMBLE", "BASELINE"))
d <- d[, c(1, 2, 5, 6, 9, 10)]
names(d) <- c("GCM", "scenario", "bio1", "bio14", "bio11", "bio17")
ggplot(d, aes(bio1, bio17)) +
geom_point()
ggplot(d, aes(bio1, bio17, color=scenario, group=GCM)) +
geom_line() +
geom_point()
ggplot(d, aes(bio1, bio17, color=scenario, group=GCM)) +
geom_line(color="black") +
geom_point()
d <- d %>% group_by(GCM) %>% add_tally()
head(d)
d <- files %>%
lapply(read_csv)
for(i in 1:length(d)) d[[i]]$scenario <- files[i] %>% substr(nchar(.)-19, nchar(.)-15)
fx <- function(x) na.omit(x)[1]
d <- Reduce("full_join", d) %>%
group_by(GCM, scenario) %>%
summarize_all(fx) %>%
filter(! GCM %in% c("ENSEMBLE", "BASELINE"))
d <- d[, c(1, 2, 5, 6, 9, 10)]
names(d) <- c("GCM", "scenario", "bio1", "bio14", "bio11", "bio17")
d <- d %>%
group_by(GCM) %>%
add_tally() %>%
filter(n==3)
ggplot(d, aes(bio1, bio17, color=scenario, group=GCM)) +
geom_line(color="black") +
geom_point()
library(ecoclim)
#
devtools::install_github("matthewkling/ecoclim")
library(ecoclim)
?pairsData
str(d)
glimpse(d)
pd <- d %>%
pairsData(c("bio1", "bio14", "bio11", "bio17"),
c("GCM", "scenario", "n"))
head(pd)
pd <- pairsData(d,
xy_vars=c("bio1", "bio14", "bio11", "bio17"),
z_vars=c("GCM", "scenario", "n"))
head(d)
pd <- pairsData(d,
xy_vars=c("bio1", "bio14", "bio11", "bio17"),
z_vars=c("GCM", "scenario"))
pd <- pairsData(as.data.frame(d),
xy_vars=c("bio1", "bio14", "bio11", "bio17"),
z_vars=c("GCM", "scenario"))
pd <- pairsData(as.data.frame(d),
xy_vars=c("bio1", "bio14", "bio11", "bio17"),
z_vars=c("GCM", "scenario", "n"))
head(pd)
ggplot(pd, aes(x_value, y_value, color=scenario, group=GCM)) +
geom_line(color="black") +
geom_point() +
facet_grid(x_var ~ y_var, scales="free")
# devtools::install_github("matthewkling/ecoclim")
library(tidyverse)
ggplot(pd, aes(x_value, y_value, color=scenario, group=GCM)) +
geom_line(color="black") +
geom_point() +
facet_grid(x_var ~ y_var, scales="free")
library(ggplot2)
ggplot(d, aes(bio1, bio17, color=scenario, group=GCM)) +
geom_line(color="black") +
geom_point()
install.packages("ggplot2")
ggplot(d, aes(bio1, bio17, color=scenario, group=GCM)) +
geom_line(color="black") +
geom_point()
library(ggplot2)
